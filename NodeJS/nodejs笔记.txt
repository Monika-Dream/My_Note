Node.js  ——》
1.导入 fs 模块方法			const fs = require("fs")
2.导入 path 模块方法			const path = require("path")
3.导入 Http 模块方法			const http = require("http")
4.创建服务器方法			const server = http.createServer()
5.项目中安装包的命令			npm i 包的完整名称
6.项目中安装包指定版本的命令		npm i 包的完整名称@版本号
7.安装 moment 第三方模块方法		npm i moment
8.快速创建 package.json 模块		npm init -y
9.卸载包				npm uninstall 包名
10.将包记录到 devDependencies 节点方法	npm i 包名 -D
11.查看 npm 的下包镜像源		npm config get registry
12.使用 nrm 切换 npm 的下包镜像源
	 - 安装nrm
		npm i nrm -g
	 - 查看所有可用的镜像源
		nrm ls
	 - 切换镜像源
		nrm use taobao
13.安装 i5ting_toc 第三方模块方法	npm install -g i5ting_toc
14.安装 Express 方法		npm i express@4.17.1
15.导入 querystring 解析请求体数据	const qs = require("querystring")
16.qs.parse(server_data)解析请求体数据
17.解决跨域问题 cors			npm i cors
18.安装 mysql 模块			npm i mysql
19.查询项目中使用到的模块		npm init -y
20.安装 Session 认证			npm i express-session
21.安装 JWT 认证			npm i jsonwebtoken express-jwt
22.安装 bcryptjs 加密包		npm i bcryptjs@2.4.3
23.安装 @hapi/joi 包定义验证规则	npm i joi
24.安装 @escook/express-joi 验证表单	npm i @escook/express-joi
25.体验 Es6 模块化规范		package.json 中 "type":"module",
26.支持 Promise 的 fs 模块  		npm i then-fs
27.创建世界上唯一的id 属性		npm i nanoid	import {nanoid} from 'nanoid' 打印 nanoid()
————————————————————————————————————————
第一课	js运行方式
 - 在 cmd 中 node js文件路径
 - [   ] 为可选参数项 
——————————————————————————————————————————
第二课	fs模块( 读取文件内容 )
 - fs.readFile( )	用来读取指定文件中的内容
格式: fs.readFile(path,  options , callback( err, dataStr ))
	 - path:文件路径
	 - options:可选参数,以什么编码格式来读取文件
	 - callback:通过回调函数拿到读取的结果( 失败与成功参数 )
例子:
fs.readFile("文件路径", '编码格式', function (err, datastr) {
    console.log(err)
    console.log(datastr)
//假设成功了,那么 err 将为 null , datastr 将为文件读取的内容
//假设失败,那么 datastr 将为错误对象
})

 - fs.writeFile( )	用来向指定的文件中写入内容, 没有则会创建( 仅限文件夹 ), 默认覆盖
格式: fs.readFile(file, data, [options], callback( err, dataStr ))
	 - file:文件路径
	 - data:要写入的内容
	 - options:可选参数,以什么编码格式来读取文件
	 - callback:通过回调函数拿到读取的结果( 失败与成功参数 )
例子:
fs.writeFile('文件路径', "写入内容", function (err) {
    console.log(err)
})
//假设成功了,那么 err 将为 null
//假设失败,那么 err 将为错误对象
——————————————————————————————————————————
第三课	fs模块( 动态路径拼接问题 )
 - 使用了 ./ 或 ../ 而出的问题 , 原因是 node 会根据所处的文件位置而拼接
	1. - 使用绝对定位即可解决问题了
	2.使用 __dirname 解决,表示当前文件所处的目录
——————————————————————————————————————————
第四课	path路径模块
 - path.join( 路径 )		用来将多个路径片段拼接成一共完整的路径字符串
例子：
let s = path.join("/a","b","c","../","/m")			\a\b\m

 - path.basename( 路径[ 删除文件扩展名 ])	返回路径中最后一部分
例子：
index.html
let dataname = path.basename( 路径[ ".html" ])
index

 - path.extname( 路径 )	获取路径中扩展名部分 	
例子：
index.html
let dataname = path.extname( 路径[ ".html" ])
.html
——————————————————————————————————————————
第五课	Http模块与基本服务器
let http = require("http")
const server = http.createServer()
 - server.on("request",(req,res)=>{  }) 		当有请求时，触发 request 模块
 - server.listen(端口号,函数)			服务器开启时调用
——————————————————————————————————————————
第六课	关于 server.on("request", (req,res)) 中 req 的解释
 - req包含了与客户端相关的数据或属性,
	 - req.url( )		被请求的 url 地址
	 - req.method( )		被请求的类型
	 - req.body( )		接受客户端的请求体数据
	 - req.data( )		获取服务端发送的数据
	 - req.end( )		当请求体数据接受完成之后自动触发
——————————————————————————————————————————
第七课	关于 server.on("request", (req,res)) 中 res 的解释
 - res是响应对象包含服务器相关的数据和属性 , 如发送给客户端字符串
	 - res.end( )		向客户端发送指定的内容 , 并结束这次请求的处理过程
	 - res.send( )		向客户端发送指定的内容
const str="Monika I Love You"			类似于 return
res.end( str )
——————————————————————————————————————————
第八课	解决中文乱码的问题
 - 请于回应内容前写入以下代码
res.setHeader('Content-Type', 'text/html;charset=utf-8')
——————————————————————————————————————————
演练 ( 不同请求地址对应不同页面 )
let http = require("http")
const server = http.createServer()
server.on("request", (req, res) => {
    res.setHeader("Content-Type", "text/html; charset=utf-8")
    let default_page = '<h1>404 Not found</h1>'
    if (req.url == "/" || req.url == "/index.html") {
        default_page = "<h1>Welcome</h1>"
    } else if (req.url == "/about.html") {
        default_page = "<h1>About this Page</h1>"
    }
    console.log("Welcome To My WEB")
    res.end(default_page)
})
server.listen(8080, function () {
    console.log("Welcome To Use My WEB Client")
})
——————————————————————————————————————————
第九课	模块化与暴露成员
 - 使用 require() 方法加载其他模块时 , 会执行被加载模块的代码
 - 在 require("路径") 导入一个模块时,默认会去找 module.exports 的内容 ( 默认为空 )
 - 使用 require() 方法导入模块时,永远以 module.exports 指向的对象为准
 - 请使用 exports 来暴露成员
 - 默认情况下 exports 与 module.exports 指向同一个对象
 - 为了防止混乱,请不要在同一模块中使用 exports 和 module.exports
添加:
 - exports 与 module.exports 用法一致
module.exports.sayName = function( ){ console.log("Hello") }
module.exports.a = '小明'
——————————————————————————————————————————
第十课	npm与包 ( 1 )
 - 例子:获取当前时间
const moment = require("moment")
let s = moment().format('YYYY-MM-DD HH::mm:ss')
console.log(s)
——————————————————————————————————————————
第十一课	npm与包 ( 2 )
 - 在创建 package.json 的时候项目文件夹名称不能使用中文或空格
 - dependencies 节点的作用
	 - 记录使用 npm i 安装过的包
——————————————————————————————————————————
第十二课	npm与包 ( 3 )
 - 在开发时用到 , 但上线时不用 , 请放到 devDependencies 节点中
 - 在开发时用到 , 但上线也用 , 请放到 dependencies 节点中
 - 将包记录到 dependencies 节点中方法
	 - npm i 包名 -D
——————————————————————————————————————————
第十三课	npm与包 ( 4 )
 - 切换 npm 下载源
1.查看当前下包的镜像源
npm config get registry
2.将下包的镜像切换为淘宝的镜像源
npm config set registry=https://registry.npm.taobao.org/
3.检查镜像源是否下载成功
npm config get registry
——————————————————————————————————————————
第十四课	包的分类
 - 项目包
	 - 开发依赖包			开发期间会用到
		 - devDependencies
	 - 核心依赖包			开发期间与项目上线时会用到
		 - dependencies
 - 全局包
	 - 在 npm install 时,如果提供了 -g 参数,则会把包安装为全局包
	 - 全局包安装目录
	 - C:\Users\Lenovo\AppData\Roaming\npm\node_modules
——————————————————————————————————————————
第十五课	i5ting_toc 模块使用
 - 是一个把 md 文档转为 html 页面的小工具
语法:
i5ting_toc -f 要转换的 md 文件路径 -o

-f	: 指定要转换的文件路径
-o	: 在转换完成之后自动在浏览器打开完成后的
——————————————————————————————————————————
第十六课	规范的包结构
 - 包必须以单独的目录而存在
 - 包的顶级目录下必须包含 package.json 这个包管理配置文件
 - package.json 中必须包含 name,version,main 这三个属性，分别代表包的名字,版本号,包的入口
解释:
 - 在使用 requise() 方法时,他会去调用顶级目录下的 package.json 文件，里面去调用 main 函数
	通过 main 属性所指向的文件
——————————————————————————————————————————
第十七课	发布包 ( package.json格式说明 )
{
"name":			下载名称( 不能重复 )
"version":	"1.0.0",		版本号(1.0.0为初始值)
"main":			包的入口文件
"description":		包的描述信息
"keywords": ["",""]		被搜索的关键字
"license":	"ISC"		包所遵循的开源协议(默认 ISC)

}
例子：
{
"name":"Steal dream",
"version":1.0.0,
"main":"index.js",
"description":"提供了格式化时间与HTMLEscape相关功能",
"keywords": ["dream"],
"license":"ISC"
}
——————————————————————————————————————————
第十八课	模块加载机制
 - 优先从缓存中进行加载
 - 模块在第一次加载后会被缓存,也就是说 require() 不会导致模块的代码被执行多次
 - 内置模块的优先级最高
 - 只用 require() 加载自定义模块时,必须指定以 . 或 ../ 开头的路径标识符,如果没有指定,node
	会把它当作 内置模块 或 第三方模块 加载
 - 如果找不到会一层一层往上翻
 - 导入时如果省略了文件的扩展名, Node.js 会根据顺序加载文件
	 - .js
	 - .json
	 - .node
	 - 加载失败 , 报错
 - 目录作为模块时,他会查找 package.json 文件,并寻找 main 属性 , 作为 require() 加载的入口
 - 如果没有 package.json 文件,它会默认加载 index.js 文件
——————————————————————————————————————————
第十九课	express 创建基本 web 服务器
 - 导入 express
const express = require('express')
 - 创建 WEB 服务器
const app = express()
 - 调用 app.listen(端口号,启动成功之后的回调函数),启动服务器
app.listen(80,()=>{
	console.log("Welcome to My Web Client")
})
——————————————————————————————————————————
第二十课	监听 GET 与 POST 请求 & 处理参数
app.get('请求URL',function( req , res ){  /处理函数/  })	监听 GET 请求
app.post('请求URL',function( req , res ){  /处理函数/  })	监听 POST 请求
res.send({JSON}/'请求成功')				发送内容
req.query						收获 Ajax 发送的参数
http://127.0.0.1/user/:id?name=monika&age=18
req.params					收获通过:的动态参数
app.get("/user/:abc/:name",(req,res)=>{})		user/ 后面传值12/012
http://127.0.0.1/user/:id?name=monika

具体例子：
app.get("/user/:id/:name",(req,res)=>{
    console.log(req.params)
    console.log(req.query)
    res.send(req.params)
})
请求:   http://127.0.0.1/user/1/monika?name=sayori
结果:   { id: '1', name: 'monika' } {name: 'sayori' }
——————————————————————————————————————————
第二十一课		( 托管静态资源 )
 - express.static()
app.use(express.static('文件夹'))		此文件夹下的所有资源将开放访问
					目录名不会存在于 URL 中

app.use("/abc",express.static('文件夹'))		此文件夹下的所有资源将开放访问
——————————————————————————————————————————
第二十二课		( express 路由的模块化 )
path.js		
let express = require('express')
let router = express.Router()
router.get("/monika",(req,res)=>{
    res.send("Get module")
})
router.post("/monika",(req,res)=>{
    res.send("Post module")
})
module.exports = router
————————————
test.js
let express = require('express')
let app = express()
let router = require('./path.js')
app.use('/api',router)		//在访问 router 的时候,前面都需要加上一个 /api 路径
app.listen(8080,()=>{
    console.log('Web Start')
})
——————————————————————————————————————————
第二十三课		( app.use 的大概解释 )
 - app.use 就是用来注册全局中间件的
——————————————————————————————————————————
第二十四课		( 中间件的概念 )
 - 指业务流程的中间处理环节
 - 对请求进行预处理
 - 当一个请求出来时,将在 get 与 post 之前执行
 - 多个中间件之间可以共享多个 req 与 res
——————————————————————————————————————————
第二十五课		( 公共中间件的格式与简化形式 )
const mv = function(req,res,next){
    console.log("这是全局中间件")
    next()				 - 转交给下一个中间件或路由( 相当于拦截 )
}
app.use(mv)			 - 注册为全局中间件


app.use(function(req,res,next){
    console.log("这是全局中间件")
    next()	
})
——————————————————————————————————————————
第二十六课		( 局部中间件的格式 )
 - 不使用 app.use 的中间件就叫做局部中间件
const mv = function(req,res,next){
       console.log(" 这是一个全局中间件 ")
       next()
}
app.get( "/" , mv , function( req,res ){
       res.send("调用 get 成功")
})
——————————————————————————————————————————
第二十七课		( 多个局部中间件的格式 )
app.get( "/" , [mv1,mv2,mv3] , function( req,res ){
       res.send("调用 get 成功")
})
——————————————————————————————————————————
第二十八课		( 中间件的分类 )
1.应用级别的中间件		绑定到 app 实例上的中间件/app.get/app.post/app.use/
2.路由级别的中间件		绑定到 express.Router() 实例上的中间件
3.错误级别的中间件		下一个课时中
4.Express 内置的中间件	下下一个课时中
5.第三方的中间件		下下下一个课时中
——————————————————————————————————————————
第二十九课		( 中间件的错误级别 )
 - 专门用来捕获整个项目中发生的异常错误
 - 一定要写在下面
 - function 函数中,有四个形参 (err,req,res,next)
app.use(function(err,req,res,next){		//在全局注册一个捕获异常
       console.log(err.message)			//打印错误信息
       res.send(`服务器发生了错误${ err.message }`)	
})
——————————————————————————————————————————
第三十课		( 中间件的错内置级别 )
 - express.static()		快速托管静态资源的内置中间件
 - express.json()		解析 Json 形式的请求体数据
	app.use( express.json() )
 - express.urlencoded()	解析 URL-encoded 格式的请求体数据
	app.use( express.urlencoded({ extended: false }) )
——————————————————————————————————————————
第三十一课		( req.body 的 undefined 问题 )
 - 中间件未配置，需 app.use(express.json())
 - 中间件未配置，需 app.use(express.urlencoded({ extended: false }))
	x-www-form-urlencoded
——————————————————————————————————————————
第三十二课		( 自定义中间件 )
 - 使用 querystring 模块解析请求体数据
 - .on 			为属性绑定事件，当有事件触发时，执行后续代码
 - req.data( )		获取服务端发送的数据
 - req.end( )		当请求体数据接受完成之后自动触发
 - qs.parse(server_data)	解析请求体数据
——————————————————————————————————————————
第三十三课		( 使用自定义解析模块 )
1.自定义模块
const qs = require("querystring")	//导入querystring模块于qs别名
function bodyParser(req,res,next){	//定义中间件函数
    let str = ""			//创建空字符串
    req.on("data",(chuck)=>{		//当有数据来时触发req.on函数
        str += chuck			//拼接字符串( 大流量会逐步发送 )
    })
    req.on("end",()=>{		//当接受完毕会触发req.on函数
        let body = qs.parse(str)		//定义变量接受被解析之后的字符串
        req.body = body		//挂载变量
        console.log(req.body)		//打印变量
        next()			//下一步
    })
}
module.exports = bodyParser		//暴露成员
2.使用模块
const express = require("express")	
const app = express()
const cust = require("./test.js")
app.use(cust)			//全局生效
app.post("/user", (req, res) => {
    res.send(req.body)
})
app.listen("8080", () => {
    console.log("Web Start")
})
——————————————————————————————————————————
第三十四课		( 解决跨域问题 )
npm i cors
const cors = require("cors")
app.use(cors())
——————————————————————————————————————————
第三十五课		( Cors响应头部 )
res.setHeader("Access-Control-Allow-Origin","一个网址")
 - 上面表示只允许来自 一个网址的 请求
 - Access-Control-Allow-Origin,"<origin>/*"	指定了允许访问该资源的外域 URL
——————————————
res.setHeader("Access-Control-Allow-Headers","一个网址")
——————————————
res.setHeader("Access-Control-Allow-Methods","POST,GET,HEAD"/"*")
 - 上面表示只允许来自一个网址的 POST,GET,HEAD 请求
——————————————
例子：
app.all("*", function (req, res, next) {
    //设置允许跨域的域名，*代表允许任意域名跨域
    res.header("Access-Control-Allow-Origin", "*");
    //允许的header类型
    res.header("Access-Control-Allow-Headers", "content-type");
    //跨域允许的请求方式 
    res.header("Access-Control-Allow-Methods", "DELETE,PUT,POST,GET,OPTIONS");
    if (req.method.toLowerCase() == 'options')
        res.send(200);  //让options尝试请求快速结束
    else
        next();
})
——————————————————————————————————————————
第三十六课		( 简单请求与预检请求 )
 - 简单请求
	 - 请求方式为 GET POST HEAD 三者之一
	 - Http 头部信息无自定义头部字段
	 - 只会发生一次请求
 - 预检请求
	 - 请求方式为 GET POST HEAD 三者之外的请求 Method 类型
	 - Http 头部信息包含定义头部字段
	 - 向服务器发送了 application/json 格式的数据
	 - 会发生两次请求, OPTION 预检成功后才会发送真正的请求
——————————————————————————————————————————
第三十七课		( Mysql 模块的使用 )
const mysql = require("mysql")
const db = mysql.createPool({
    host: "127.0.0.1",
    user: "monika",
    password: "sxhmzz840845135",
    database: "mysql_db_01"
})
let SQL = "insert into users (username,password) set ?"
db.query(SQL,user,(err,result)=>{ //会自动逐步代替问号(一定是个对象{username:"monika"})
    err && console.log(err.message)
    console.log(results)
})
——————————————————————————————————————————
第三十八课		( Mysql 关键字 )
 - affectedRows	 - 被影响的行数
if( result.affectedRows === 1 )		当数据成功插入时
——————————————————————————————————————————
第三十九课		( WEB开发 )
 - 服务端渲染传统
 - 前后端分离
——————————————————————————————————————————
第四十课		( 身份认证 )
 - 服务端渲染	推荐 Session 认证机制
 - 前后端分离	推荐 JWT 认证机制
——————————————————————————————————————————
第四十一课		( 身份认证 - Session )
 - HTTP协议的无状态型
	 - 指的是客户端的每次 HTTP 请求都是独立的,连续多个请求之间没有直接关系
	 - 服务器不会主动保留每次 HTTP 请求的状态
 - 如何突破 HTTP 无状态的限制
	 - 对于超市来说,理解 VIP 实则就是发送会员卡
	 - 对于此,WEB专业术语叫做 Cookie
——————————————————————————————————————————
第四十二课		( 什么是曲奇饼干?(cookie) )
 - 是纱世里的最爱, 巧克力味的想必也是极好的 (
 - 曲奇饼干是存储在用户浏览器中的一段不超过 4KB 的字符串,由名称,一个指,和其他几个用于控制
	 - Cookie 有效期,安全性,使用范围 的可选属性组成
 - 曲奇饼干在不同的域名下各自独立,当用户发起请求时,会自动把当前域名下的所有未过期的曲奇饼干
	 - 一同发送给服务器
——————————————————————————————————————————
第四十三课		( 曲奇饼干的几大特性?(cookie) )
 - 不具有安全性
 - 自动发送
 - 域名独立
 - 过期时限
 - 4KB 限制
——————————————————————————————————————————
第四十四课		( session 的使用 )
const session = require("express-session")
app.use(session({
    secret: "keyboard cat",  	//值可以为任意字符串
    resave: false,         	//固定写法
    saveUninitialized: true  	//固定写法
}))
req.session.destroy()	//清空服务器保存的 session 信息( 对应清空 )
——————————————————————————————————————————
第四十五课		( JWT 认证机制 )
 - JWT 通常由三部分组成, 分别是 Header( 头部 ), Payload( 有效荷载 ), Signature( 签名 )
 - 三者之间使用英文 "." 分隔, 格式如下
Header.Payload.Signature
 - Payload 部分才是真正的用户信息, 它是用户信息经过加密之后生成的字符串
 - Header 与 Signature 是安全性相关的部分, 只是为了保证 Token 的安全性
 - 客户端通常将其存储在 localStorage 或 sessionStorage 中
——————————————————————————————————————————
第四十六课		( JWT 使用方式 )
 - 请先安装 jsonwebtoken 与 express-jwt
 - 用于将用户信息去生成一个 jsonwebtoken 字符串	 - jsonwebtoken
 - 用于将 jsonwebtoken 解析还原成用户信息对象	 - express-jwt
 - 把 JWT 放在 HTTP 请求头的 Authorization 字段中, 格式如下
Authorization: Bearer <token>
——————————————————————————————————————————
第四十七课		( 定义 secret 密钥 )
 - 为防止被人在网络传输过程中破解，我们需要定义一个加密和解密的 srcret 密钥
const secretKey = "Just Monika Num1"
使用 jsonwebtoken 提供的 sign() 方法, 将用户信息加密成 JWT 字符串
jsonwebtoken.sign(用户信息对象,加密的密钥,配置对象(可以设置有效期))
例子:
jwt.sign({username:test_obj[0].value},secretKey,{expiresIn:"30s"})
 - expiresIn 有效期 
——————————————————————————————————————————
第四十八课		( 还原 secret 密钥 )
expressJWT({你之前设置的密钥}).unless({path:[可以填正则,表示哪些路径不需要访问权限]}，
algorithms:['HS256'] - 默认)
 - unless 除外
——————————————————————————————————————————
第四十九课		( 对于加密与解密的总结 )
 - 关于 解密的 expressJWT 挂载全局问题
 - 主要有两种方式，一种是哪些请求需要验证就往哪里加验证；
 - 另外一种是先给全部请求加上验证，再给不需要验证的请求配置白名单。
app.use(expressJWT({secret:secretKey,algorithms:['HS256']}).unless({path:["/"]}))
 - 注意不用写成箭头函数形式
 - secret:这里填解密密码 - 与加密密码请保持一致，必填
 - algorithms:新增的必填，默认可以填['HS256']
 - unless:用来处理我们不想接受身份验证的路径
 - 关于解密请勿挂载于最上面，应为没有 token 会导致报错- - - - - -	(2020/3/3总结)
 - 在挂载成功后将会出现 req.user 属性,此属性为解密后的值
————————
 - 关于 加密的 jsonwebtoken 问题
const tokenstr = jwt.sign({ username: test_obj[0].value }, secretKey, { expiresIn: "60s" })
 - jwt 为上方 const jwt = require("jsonwebtoken")
 - 第一个对象是你想要加密的东西( 请勿轻易信赖加密 )
 - secretKey:这里填解密密码 - 与解密密码请保持一致，必填
 - {可以加个 expiresIn}:过期倒计时,将在发送的那一刻启动 h/s
 - 返回加密后的字符串,也就是所谓的 token ，解密需要用到
 - 所以请在返回数据时包含 res.send({token:tokenstr})
————————
 - 关于捕获 expressJWT 的硬闯返回( 全局设置了EJ,但是没token )
app.use(function (err, req, res, next) {
  if (err.name === 'UnauthorizedError') {
    res.status(401).send("干嘛呢？你想硬闯？！")
  }
})
————————
在使用 Postman 验证时请
 - 转换到请求头, 并添加 Authorization
 - 它对应的值为 token 值 , 但是必须在它前面加上Bearer (注意必须加空格)
——————————————————————————————————————————
第五十课		( 使用 bcryptjs 包进行加密与解密 )
const bcrypt = require("bcryptjs")		 - 加密
 - 在注册用户并确认可用后,调用 bcrypt.hashSync(明文密码,随机的长度) 方法,对用户密码进行加密
	处理
userinfo.password = bcrypt.hashSync(userinfo.password,10)
——————————
const bcrypt = require("bcryptjs")		 - 解密
 - bcrypt.compareSync(用户提交的密码,数据库中的密码)
	 - 比较密码是否一致
	 - 返回的是布尔值
that_user_password_true? = bcrypt.compareSync(用户提交的密码,数据库中的密码)

——————————————————————————————————————————
第五十一课		( joi )
 - 填入规则
 - string() 值必须是字符串
 - alphanum() 值只能是包含 a-zA-Z0-9 的字符串
 - min(length) 最小长度
 - max(length) 最大长度
 - required() 值是必填项，不能为 undefined
 - pattern(正则表达式) 值必须符合正则表达式的规则
 - number() 值必须是数字
 - alphanum() 只能包含字母和数字
 - email() 必须符合邮件验证规则
 - integer() 必须是整数
例子：
const joi = require("joi ")
const username = joi.string().alphanum().min(1).max(10).require()
const password = joi.string().pattern(s^[\S](6,12)$/).require()
——————————————————————————————————————————
第五十二课		( @escook/express-joi )
 - 使用规则
const expressjoi = require("@escook/express-joi")
router.post("/reguser",expressjoi(reg_login_schema),user_handler.regUser)
——————————————————————————————————————————
第五十三课		The End Of The Dream












