专注于网络请求的库						--- axios
——————————————————————————————————————————
————————》》》				基本语法格式
axios({
    method:"请求的类型",
    url:"请求的 URL 地址",
}).then((result)=>{
    result是成功之后的结果
})
——————————————————————————————————————————
————————》》》				传参方式
//URL中的查询参数
params:{  }

//请求体参数
data:{   }
——————————————————————————————————————————
————————》》》				指定类型请求
axios.get()
axios.post()
axios.delete()
——————————————————————————————————————————
————————》》》				指定类型请求 - GET
axios.get("url地址",{
params:{  },

})
——————————————————————————————————————————
————————》》》				指定类型请求 - POST
axios.post("url地址",{直接传参})
——————————————————————————————————————
——————>					挂载 axios 与 配置基础路径
 - 每个 vue 文件都要去导入 axios 会很麻烦
 - 每个 vue 文件实际上都是 vue 的实例
 - 在 main.js 文件中导入 axios
 - Vue.prototype.axios = axios
 - 后续使用 axios 就可以 this.axios.get()

 - axios.defaults.baseURL = "http://www.liulongbin.top:3006"
——————————————————————————————————————————
————————》》》				拦截器
应用场景
 - Token 身份验证
 - Loading 效果
——————————————————————————————————————————
————————》》》				请求拦截器
 - 数据发出时会做一次拦截, 可以选择修改
axios.interceptors.request.use(成功的回调, 失败的回调)
 - 下面是固定写法, 失败的函数可以被省略
axios.interceptors.request.use((config)=>{return config}, (error)=>{return Promise.reject(error)})
——————————————————————————————————————————
————————》》》				响应拦截器
 - 数据接受时会做一次拦截, 可以选择修改
axios.interceptors.response.use(成功的回调, 失败的回调)
 - 下面是固定写法, 失败的函数可以被省略
axios.interceptors.response.use((response)=>{return response}, (error)=>{return Promise.reject(error)})
——————————————————————————————————————————
————————》》》				proxy代理
 - 提供的代理功能, 仅在开发调试阶段生效
 - 项目上线时, 仍旧需要 服务器 开启 CORS 跨域资源共享
 - 在遇到跨域问题时且后端没开启资源共享时
 - 把 axios 请求根路径设置为 Vue 项目的运行地址( 接口请求不在跨域 )
 - vue 项目发现请求的接口不存在, 把请求转交给 proxy 代理
	 - 创建 vue.config.js
	 - 写入
	 - devServer:{
			proxy:"请求的真正地址"	
		}
 - 代理把请求根路径设置为 devServer.proxy 属性的值, 发起真正的请求
 - 代理把请求到的数据, 转发给 axios





















































































































































