 - 在没有 session 或 cookie 的 时候请检查电脑的 host 文件 之类的, 一定要在同源
 - get 或 post 之类的一定要携带一个参数 一般为 request

 - python manage.py shell	所见即所得
 - python -m http.server 8080	运行前端在它的文件夹中
----------------------------------------------------------------------- 视图定义 get 与 post 注意

class LoginView(View):
    def post(self,requests):
        return HttpResponse("ok")
    def get(self,requests):
    	return HttpResponse("ok")

 - 注意参数必须要有一个

----------------------------------------------------------------------- 关于用户名与密码设置
	1.django 自带一个用户模型
	2.这个用户模型 有密码的加密 和 密码的验证
		 - from django.contrib.auth.models import User
		 	 - 有可能内部所使用的无法满足我们的需求, 比如没有 email模型, 那么重写与继承
		 - from django.contrib.auth.models import AbstractUser			
class User(AbstractUser):
	email = models.CharField(max_length=11, unique=True)

	# 改变表名
    class Meta:
        db_table = 'tb_users' 


异常解决:
	自定义模型类与 Django 原生 Users 继承一致导致报错 (fields.E304)
		 - 请在 Setting.py 文件中写入 AUTH_USER_MODEL = 'app名字.模型类的名字' 
		 - python manage.py makemigrations users	 = 只用一次
		 - python manage.py migrate


 - 如果根据上面写入, 那么假设加入数据成功时, 数据库将显示为
 id    					1
 password 				123456789
 last_login				NULL
 is_superuser			0
 username				Monika
 first_name
 last_name
 email
 is_staff				0
 is_active				1
 date_joined			2022-11-15 09:15:38.279283
 mobile					18629421525

-------------------------------------------------------------- 检查密码

对于 user = User.objects.create_user(username=mobile,mobile=mobile,password=password) 的检测密码
     - 由于密码加密, 所以我们仍然需要 Django 的方法解密
user.check_password(password)  

----------------------------------------------------------------------- 关于接口的风格
 - RESTful 风格
 - 多使用 名词的复数形式
 - 对于数据的增删改查使用 GET/PUSH/PUT/DELETE 来实现
 - 将参数多使用 URL 进行传递, 这里注意并不是 query 传参
 - 应当尽量把 API 部署在专用域名之下, 如果 API 简单则可以考虑放在主域名之下
 - 需求变更多时, 应该将 API 版本号放入 URL 中 http://127.0.0.1:8080/app/1.1/foo


传参示例(非重要)
http://127.0.0.1:8080/goods?type=t01&id=1001     简化为下方形式
http://127.0.0.1:8080/t01/goods/1001

传参示例(重要)
 - 例如 分页 之类的, 是可以使用 query 传参, 本质实则是美化 URL 传参, 无所谓


接口示例:
 GET /goods/4 			前端获取后端指定产品
 GET /goods				前端获取后端所有产品
 POST /goods/ 			前端发送数据保存到后端
 PUT /goods/4  			前端修改后端保存的数据
 DELETE /goods/4  		前端删除后端保存的指定数据

----------------------------------------------------------------------- 关于响应状态码

200 OK - [GET]：服务器成功返回用户请求的数据

201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。

202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）

204 NO CONTENT - [DELETE]：用户删除数据成功。

400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作

401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。

403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。

404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。

406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。

410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。

422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。

500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。

----------------------------------------------------------------------- 错误处理

 - 如果状态码是4xx，服务器就应该向用户返回出错信息。
     - 一般来说，返回的信息中将error作为键名，出错信息作为键值即可。

{
    error: "Invalid API key"
}

return JsonResponse({},status=404)


----------------------------------------------------------------------- 返回数据

 - 应当使用 JSON ,避免 XML
 - 在数据库响应成功时,应当再把数据返回回去 ( 酌情而定 )

-------------------------------------------------------------- 前端 CORS 跨域问题解决

安装                  pip install django-cors-headers
# 添加应用
INSTALLED_APPS = (
    ...
    'corsheaders',
    ...
)
# 中间层设置 ( 放到最上面 )
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    ...
]
# 添加白名单
# CORS
CORS_ORIGIN_WHITELIST = (
    'http://127.0.0.1:8080',
    'http://localhost:8080',
    'http://www.meiduo.site:8080',
    'http://www.meiduo.site:8000'
)
CORS_ALLOW_CREDENTIALS = True  # 允许携带cookie

 - 凡是出现在白名单中的域名，都可以访问后端接口
 - CORS_ALLOW_CREDENTIALS 指明在跨域访问中，后端是否支持对cookie的操作。

-------------------------------------------------------------- 收集前端数据并进行非空校验

 def post(self,request):
        body_dist = JSON.loads(request.body.decode())
        username = body_dist.get('username')
       	...

        if not all([username,password,password2,mobile,allow]): 			#一旦出现 None 或 False 则 all 返回 False
            return JsonResponse({'code':1,'errorMsg':"请勿绕过前端界面"})


        return JsonResponse({'code':0,'errorMsg':'ok'})

-------------------------------------------------------------- Django 原生密码加密

 - 使用 create_user 即可
User.objects.create_user(username=username,password=password,mobile=mobile)

-------------------------------------------------------------- 图片验证码

 - 接受路由中的 uuid									请求
 - 生成图片验证码和图片二进制, 保存在 rides 中 			业务逻辑
 - 返回图片二进制										响应

请将工具包中的 生成图片验证码 解压近你所认定为第三方库的地方 - libs
 - pip install pillow

from libs.captcha.captcha import captcha
text, image = captcha.generate_captcha()			文本内容 与 二进制

 - 链接 redis ( 默认是 default )

from django_redis import get_redis_connection
redis_cli = get_redis_connection('code') <- 选择库,不写默认 default 配置信息

#指令,限时 name , time/秒 , value
redis_cli.setex(uuid, 100, text)

'image/jpeg'     'image/gif'     'image/png'
 - 二进制文件请用 HttpResponse(image,content_type='image/jpeg')

使用案例:
class ImageCodeView(View):
    def get(self, requests ,uuid):
        from libs.captcha.captcha import captcha   					#导入 二维码 生成第三方库
        text, image = captcha.generate_captcha()   					#接收 
        from django_redis import get_redis_connection  				#
        redis_cli = get_redis_connection('code')
        redis_cli.setex(uuid, 100, text)
        return HttpResponse(image,content_type='image/jpeg')

-------------------------------------------------------------- 图片验证码后端逻辑

 - 借助第三方平台进行首发短信
 - 我 没钱 邮箱
 - https://www.yuntongxun.com/
 - 工具包里面以存放文件

 - 流程
  - 获取前端发过来的 image_code 以和 uuid <- image_code是用户输入的图形验证码,uuid 是图片的 redis 库的键 
  - 进行两方的全部非空判断
  - 连接 redis 根据 uuid 以取得值 ( 二进制文件需要解码 ), 判断是否为空( is None )
  - 需要将解码之后的数据库中 密码小写化( .decode().lower() ), 与用户写的验证码小写化进行比对 ( .lower() )
  - 比对成功之后编写接下来的业务逻辑

-------------------------------------------------------------- 避免恶意多次发送短信

 - 根据手机号拼接新字段写入 redis数据库,  send_flag_phoneNumber
     - 限制最大生存时间, 在生存周期之内无法再次发送短信
send_flag = redis.get()
if send_flag is not None:

-------------------------------------------------------------- 生产者消费者模式

问题：
 - 我们的代码是自上而下同步执行的。
 - 发送短信是耗时的操作。如果短信被阻塞住，用户响应将会延迟。
 - 响应延迟会造成用户界面的倒计时延迟。

-------------------------------------------------------------- 登陆

 - 判断用户输入的是用户名还是电话号码
 - User.USERNAME_FIELD="mobile"/"username"(默认)                   设置查询字段
 - from django.contrib.auth import authenticate                    导入 Django 的自带验证库, 因为加密也是他加的
user = authenticate(username=username,password=password)           提供的查询方式(上方可以设置)
    if user is None:                                               没有查到或密码不对就返回 
        return JsonResponse({'code':400,'errmsg':'账号或密码错误'}) 

    from django.contrib.auth import login                           导入 Django 自带的状态保持库
    login(requests,user)
    if remembered:                                                  前端选择是否记住密码
        requests.session.set_expiry(None)                           设置时间
    else:
        requests.session.set_expiry(0)


-------------------------------------------------------------- 展示登陆信息

 - 这里是 Vue 读取 Cookie 信息得知用户已经登陆的方案, 之前我的网站是 ... 
 	 - 好吧之前我那写的是个什么锤子 ?
 - 只不过现在好像用到的都是 Token 了
 - 就是吧数据写到 Cookie 上就是了

-------------------------------------------------------------- 退出登陆

 - 当用户退出登陆的时候 axios 发送 delete 请求
from django.contrib.auth import logout
class LogoutView(View):
    def delete(self,request):
        #删除 Session
        logout(request)
        response = JsonResponse({'code':0, 'errmsg':"ok"})
        #删除 Cookie
        response.delete_cookie('username')
        return response

-------------------------------------------------------------- 用户界面权限问题


from django.contrib.auth.mixins import LoginRequiredMixin
 # - 但是 LoginRequiredMixin 未登录返回的是一个重定向, 并不是 JSON 数据
 	 # - 我们需要 JSON
 	 # - 重写类方法就可以啦

- 1. 重写 LoginRequiredMixin
from django.contrib.auth.mixins import AccessMixin
class LoginRequiredJSONMixin(AccessMixin):
    """Verify that the current user is authenticated."""
    def dispatch(self, request, *args, **kwargs):
        if not request.user.is_authenticated:
            return JsonResponse({'code':0,'errmsg':'没有登陆捏 ~'})
        return super().dispatch(request, *args, **kwargs)

- 1. 重写 LoginRequiredMixin 内部函数 self.handle_no_permission()
from django.contrib.auth.mixins import LoginRequiredMixin
class LoginRequiredJSONMixin(LoginRequiredMixin):
    def handle_no_permission(self):
       return JsonResponse({'code':0,'errmsg':'没有登陆捏 ~'})



class CenterView(LoginRequiredMixin,View):
    def

-------------------------------------------------------------- 第三方登陆

 - 查看文档
 	 - https://wiki.connect.qq.com/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C_oauth2-0
 	 - 查看文档即可，下面只是给一些看文档思路

 - 准备工作
# QQ登录参数
# 我们申请的 客户端id
QQ_CLIENT_ID = '101474184'
# 我们申请的 客户端秘钥
QQ_CLIENT_SECRET = 'c6ce949e04e12ecc909ae6a8b09b637c'
# 我们申请时添加的: 登录成功后回调的路径
QQ_REDIRECT_URI = 'http://www.meiduo.site:8080/oauth_callback.html'
111111111111111111111111111111111111111111111111111111
 - 放置 QQ 前端登陆
 - 获取 Authorization Code
	 - 请求地址： PC网站：https://graph.qq.com/oauth2.0/authorize
	 - 请求方法： GET
	 - 传参方式： Query参数

response_type		必须	授权类型，此值固定为“code”。
client_id			必须	申请QQ登录成功后，分配给应用的appid。
redirect_uri		必须	成功授权后的回调地址，必须是注册appid时填写的主域名下的地址，
						 - 建议设置为网站首页或网站的用户中心。注意需要将url进行URLEncode。
state				必须	client端的状态值。用于第三方应用防止CSRF攻击，
						 - 成功授权后回调时会原样带回。请务必严格按照流程检查用户与state参数状态的绑定。
scope				可选	请求用户授权时向用户显示的可进行授权的列表。
display				可选	仅PC网站接入时使用,用于展示的样式。
						 - 如果传入“mobile”，则展示为mobile端下的样式, 不传则默认展示为PC下的样式
返回说明：
 -  如果用户成功登录并授权，则会跳转到指定的回调地址，并在redirect_uri地址后带上Authorization Code和原始的state值。如：
	 - PC网站：http://graph.qq.com/demo/index.jsp?code=9A5F************************06AF&state=test
注意：此code会在10分钟内过期()
222222222222222222222222222222222222222222222222222222
 - 通过Authorization Code获取Access Token
 - 请求地址： PC网站：https://graph.qq.com/oauth2.0/token
 - 请求方法：GET
 - 请求参数：
请求参数请包含如下内容：
 - grant_type	必须	授权类型，在本步骤中，此值为“authorization_code”。
 - client_id	必须	申请QQ登录成功后，分配给网站的appid。
 - client_secret	必须	申请QQ登录成功后，分配给网站的appkey。
 - code	必须	上一步返回的authorization code。
		 - 如果用户成功登录并授权，则会跳转到指定的回调地址，并在URL中带上Authorization Code。
		 - 例如，回调地址为www.qq.com/my.php，则跳转到：
		 - http://www.qq.com/my.php?code=520DD95263C1CFEA087******
注意此code会在10分钟内过期。
redirect_uri	必须	与上面一步中传入的redirect_uri保持一致。
fmt	可选	因历史原因，默认是x-www-form-urlencoded格式，如果填写json，则返回json格式

返回说明：
 - 如果成功返回，即可在返回包中获取到Access Token。 如(不指定fmt时）：
 - access_token=FE04************************CCE2&expires_in=7776000&refresh_token=88E4************************BE14
 - 参数说明	描述
 - access_token			授权令牌，Access_Token。
 - expires_in			该access token的有效期，单位为秒。
 - refresh_token		在授权自动续期步骤中，获取新的Access_Token时需要提供的参数。
							 - 注：refresh_token仅一次有效


-------------------------------------------------------------- 第三方登陆 QQ 例子

class QQLoginURLView(View):
    def get(self,requests):
    	# 协助 QQ 登陆的库 QQLoginTool Django笔记，settings 位置集中处理
        qq = OAuthQQ(client_id=settings.QQ_CLIENT_ID,client_secret=settings.QQ_CLIENT_SECRET,redirect_uri=settings.QQ_REDIRECT_URI, state='xxxxxx')
        qq_login_url = qq.get_qq_url()
        # 前端将用户想要 QQ 登陆意向发送给后端，后端返回 QQ 登陆的官方链接
        return JsonResponse({'code':0,'errmsg':'ok','login_url':qq_login_url})


class OauthQQView(View):
	#这里是 QQ 在用户登陆完之后, 将 code 发送给 前端(query), 前端再次发送给后端
    def get(self,requests):
        code = requests.GET.get('code')
        if code is None:
            return JsonResponse({'code':400,'errmsg':'参数不全'})
        qq = OAuthQQ(client_id=settings.QQ_CLIENT_ID,
                     client_secret=settings.QQ_CLIENT_SECRET,
                     redirect_uri=settings.QQ_REDIRECT_URI,
                     state='xxxxxx')	#state 仍旧不知道怎么用
        token = qq.get_access_token(code)	# 获取 Token 
        openid = qq.get_open_id(token)		# 获取 用户 openid 一一对应的
        # 绑定过就直接登陆, 没有就需要绑定
        # D0F21A7F37C761BFBFB87B3DEE3ECF69 这是 自己的 openid 示例
        # D0F21A7F37C761BFBFB87B3DEE3ECF69 两次登陆，一模一样

-------------------------------------------------------------- 模型类外键补充

apps
	oauth 
		models.py
	users
		models.py
	...
		...

oauth - models.py 中外键可以 远程链接 users - models.py

											子应用名.模型名
oauth - models.py = user = models.ForeignKey('users.User', on_delete=models.CASCADE, verbose_name='用户')


-------------------------------------------------------------- 对于 数据库 修改的便捷方式

 - 在登陆的状态下, 也就是需要 LoginRequiredJSONMixin 加入

class EmailView(LoginRequiredJSONMixin,View):
    def put(self, requests):
        data = JSON.loads(requests.body.decode())
        email = data.get('email')
        user = requests.user
        user.email = email
        user.save()

-------------------------------------------------------------- 对于省市区的数据表构建方式

  id 				 name 				parent_id
10000				河北省			      NULL

10100				保定市			      10000
10200				石家庄市				  10000
10300				唐山市				  10000

10101				雄县					  10100
10102				安新县				  10100

// 定义外键新方式
parent = models.ForeignKey('self', related_name='subs')

class Area(models.Model):
    """省市区"""
    name = models.CharField(max_length=20, verbose_name='名称')
    parent = models.ForeignKey('self', on_delete=models.SET_NULL, related_name='subs', null=True, blank=True, verbose_name='上级行政区划')

    class Meta:
        db_table = 'tb_areas'
        verbose_name = '省市区'
        verbose_name_plural = '省市区'

    def __str__(self):
        return self.name

 - 根据 name 查 parent_id = id
 - 查出来之后的 id 进行了 外键

-------------------------------------------------------------- 数据表构建规范

1. SPU介绍
 - SPU = Standard Product Unit （标准产品单位）
 - SPU是商品信息聚合的最小单位，是一组可服用、易检索的标准化信息的集合，该集合描述了一个产品的特性。
 - 通俗的讲，属性值、特性相同的商品就可以归类到一类SPU。
 - 例如: iPhone X 就是一个 SPU ，与商家、颜色、款式、规格、套餐等都无关。

2. SKU介绍
 - SKU = Stock Keeping Unit （库存量单位）
 - SKU即库存进出计量的单位，可以是以件、盒等为单位，是物理上不可分割的最小存货单元。
 - 通俗的讲，SKU是指一款商品，每款都有一个SKU，便于电商品牌识别商品。
 - 例如： iPhone X 全网通 黑色 256G 就是一个 SKU ，表示了具体的规格、颜色等信息。

-------------------------------------------------------------- 数据库多对多情况下的构建方案

学生表
学生 id 						学生 Name 
100							Monika
200							Sayori
300							Yuri
400							Natsuki


老师表
老师 id  					老师 Name
666  						Jack 老师
999  						梦华老师
888  						李华老师
222  						张三老师


第三张表
stu_id						teacher_id
100  							666
100  							222
200   							999
200 							999

-------------------------------------------------------------- models.ImageField

 - 对于它可以实现 url 自动拼接
它里面有
    def url(self):
        self._require_file()
        return self.storage.url(self.name)	数据库中的路径
我们重写的就是这里

 - 首先在 setting 中
DEFAULT_FILE_STORAGE = 'utils.storage.MinIOStorage'

# MinIO相关参数
MinIO_BASE_URL = 'http://127.0.0.1:9000/monika/'


 - 创建 storage 文件

from django.core.files.storage import Storage
from meiduo_mall.settings import MinIO_BASE_URL

class MinIOStorage(Storage):
    """自定义文件存储系统，修改存储的方案"""
    def __init__(self, minio_base_url=None):
        self.minio_base_url = minio_base_url or MinIO_BASE_URL
    def _open(self, name, mode='rb'):pass
    def _save(self, name, content):pass
    def url(self, name):
        return self.minio_base_url + name

-------------------------------------------------------------- 数据库有表, 但是迁移文件没有执行

 - django 在 django_migrations 表中记录迁移
 - 新增一条针对的文件即可
 - 例如
  id     文件名                            时间, 随便
  26    contents    0001_initial    2022-12-09 08:41:30.000000

-------------------------------------------------------------- 数据简单判断
 - 在一个内容去查找列表的自己时, 可以

 array = ['name1','name2','name3']
 list = ['name1','name2']

 result = {}
 for i in array:
    result[i] = {
        'name':i,
        'isflag': i in list
    }

-------------------------------------------------------------- 乐观锁在业务中实现
# 遍历购物车中被勾选的商品信息
for sku_id in sku_ids:
    while True:
        # 查询SKU信息
        sku = SKU.objects.get(id=sku_id)

        # 读取原始库存
        origin_stock = sku.stock
        origin_sales = sku.sales

        # 判断SKU库存
        sku_count = carts[sku.id]
        if sku_count > origin_stock:
            # 事务回滚
            transaction.savepoint_rollback(save_id)
            return http.JsonResponse({'code': 400, 'errmsg': '库存不足'})

        # 模拟延迟
        # import time
        # time.sleep(5)

        # SKU减少库存，增加销量
        # sku.stock -= sku_count
        # sku.sales += sku_count
        # sku.save()

        # 乐观锁更新库存和销量
        new_stock = origin_stock - sku_count
        new_sales = origin_sales + sku_count
        result = SKU.objects.filter(id=sku_id, stock=origin_stock).update(stock=new_stock, sales=new_sales)
        # 如果下单失败，但是库存足够时，继续下单，直到下单成功或者库存不足为止
        if result == 0:
            continue

        # 保存订单商品信息 OrderGoods（多）
        OrderGoods.objects.create(
            order=order,
            sku=sku,
            count=sku_count,
            price=sku.price,
        )

        # 保存商品订单中总价和总数量
        order.total_count += sku_count
        order.total_amount += (sku_count * sku.price)

        # 下单成功或者失败就跳出循环
        break

# 添加邮费和保存订单信息
order.total_amount += order.freight
order.save()

-------------------------------------------------------------- Serializer 字段方案

class BookInfo(models.Model):
    name = models.CharField(max_length=20, verbose_name='名称') #图书名称
    pub_date = models.DateField(verbose_name='发布日期') #发布日期
    readcount = models.IntegerField(default=0, verbose_name='阅读量') #阅读量
    commentcount = models.IntegerField(default=0, verbose_name='评论量') #评论量
    is_delete = models.BooleanField(default=False, verbose_name='逻辑删除') #逻辑删除
    image = models.ImageField(upload_to='book/', verbose_name='图片', null=True)
    #元类信息 : 修改表名
    class Meta:
        db_table = 'bookinfo' # 指明数据库表名
        verbose_name = '图书'  # 在admin站点中显示的名称
        verbose_name_plural = verbose_name  # 显示的复数名称

    def __str__(self):
        """定义每个数据对象的显示信息"""
        return self.name

 - 单独创建一个 serializers.py 文件 

from rest_framework import serializers

class BookInfoSerializer(serializers.Serializer):
    """图书数据序列化器"""
    id = serializers.IntegerField(label='ID')
    name = serializers.CharField(label='名称')
    pub_date = serializers.DateField(label='发布日期')
    readcount = serializers.IntegerField(label='阅读量')
    commentcount = serializers.IntegerField(label='评论量')

-------------------------------------------------------------- Serializer 使用

 - 上方定义好之后, 导入 图书数据序列化器 进 view 文件后即可使用
 - 默认情况下, 我们不能传递查询结果集, 只能单个传递, 也就是 get(id=1)
     - 如果需要传递查询结果集, 需要在创建 Serializer 增加 many=True 参数

from ... import BookInfo
from ... import BookInfoSerializer

 - 查出单个数据时(打印字典数据)
book = BookInfo.objects.get(id=1)
Serializer = BookInfoSerializer(instance=book)
print(Serializer.data)

 - 查出多个数据时(打印带有顺序的字典数据)
book = BookInfo.objects.all()
Serializer = BookInfoSerializer(instance=book, many=True)
print(Serializer.data)

-------------------------------------------------------------- 使用关联对象的序列化器例子

在BookInfoSerializer中添加关联字段：

from rest_framework import serializers

class PeopleInfoSerializer(serializers.Serializer):
    """英雄数据序列化器"""
    id = serializers.IntegerField(label='ID')
    name = serializers.CharField(label='名字')
    password=serializers.CharField(label='密码')
    description = serializers.CharField(label='描述信息')


class BookInfoSerializer(serializers.Serializer):
    """图书数据序列化器"""
    id = serializers.IntegerField(label='ID')
    name = serializers.CharField(label='名称')
    pub_date = serializers.DateField(label='发布日期')
    readcount = serializers.IntegerField(label='阅读量')
    commentcount = serializers.IntegerField(label='评论量')
    #一本书籍关联多个人物
    people=PeopleInfoSerializer(many=True)

 - 使用效果
     - from book.serializers import BookInfoSerializer                                                                                  
     - from book.models import BookInfo                                                                                                 
     - book=BookInfo.objects.get(id=1)                                                                                                  
     - s = BookInfoSerializer(book)                                                                                                     
     - s.data





